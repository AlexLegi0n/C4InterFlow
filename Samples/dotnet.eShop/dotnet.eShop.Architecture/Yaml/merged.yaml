dotnet:
  eShop:
    Architecture:
      SoftwareSystems:
        BasketApi:
          Label: Basket Api
          Boundary: Internal
          Description: ''
          Containers: {Data: {Label: Data, Description: '', ContainerType: None, Boundary: Internal, Technology: '', Components: {RedisBasketRepository: {Label: Redis Basket Repository, ComponentType: None, Description: '', Technology: '', Containers: {}, Interfaces: {DeleteBasketAsync: {Label: Delete Basket Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisDatabase.Interfaces.KeyDeleteAsync}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetBasketAsync: {Label: Get Basket Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisDatabase.Interfaces.StringGetLeaseAsync}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.GetBasketKey}, {Type: Return, Params: JsonSerializer.Deserialize}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetBasketKey: {Label: Get Basket Key, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: ""}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, UpdateBasketAsync: {Label: Update Basket Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisDatabase.Interfaces.StringSetAsync}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.GetBasketKey}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.GetBasketAsync}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}}}, RedisDatabase: {Label: Redis Database, ComponentType: None, Description: '', Technology: '', Containers: {}, Interfaces: {KeyDeleteAsync: {Label: Key Delete Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, StringGetLeaseAsync: {Label: String Get Lease Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, StringSetAsync: {Label: String Set Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}}}}, Interfaces: {}, Entities: {}}, Grpc: {Label: Grpc, Description: '', ContainerType: None, Boundary: Internal, Technology: '', Components: {BasketService: {Label: Basket Service, ComponentType: None, Description: '', Technology: '', Containers: {}, Interfaces: {DeleteBasket: {Label: Delete Basket, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: string.IsNullOrEmpty(userId), Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.ThrowNotAuthenticated}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.DeleteBasketAsync}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetBasket: {Label: Get Basket, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.GetBasketAsync}, {Type: If, Params: data is not null, Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.MapToCustomerBasketResponse}]}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, MapToCustomerBasket: {Label: Map To Customer Basket, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: [{Type: Return, Params: response}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, MapToCustomerBasketResponse: {Label: Map To Customer Basket Response, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: [{Type: Return, Params: response}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, ThrowBasketDoesNotExist: {Label: Throw Basket Does Not Exist, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: ""}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, ThrowNotAuthenticated: {Label: Throw Not Authenticated, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: ""}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, UpdateBasket: {Label: Update Basket, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: string.IsNullOrEmpty(userId), Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.ThrowNotAuthenticated}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.MapToCustomerBasket}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Data.Components.RedisBasketRepository.Interfaces.UpdateBasketAsync}, {Type: If, Params: response is null, Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.ThrowBasketDoesNotExist}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.BasketApi.Containers.Grpc.Components.BasketService.Interfaces.MapToCustomerBasketResponse}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}}}}, Interfaces: {}, Entities: {}}}
          Interfaces: {}
        CatalogApi:
          Label: Catalog Api
          Boundary: Internal
          Description: ''
          Containers: {Api: {Label: Api, Description: '', ContainerType: None, Boundary: Internal, Technology: '', Components: {CatalogApi: {Label: Catalog Api, ComponentType: None, Description: '', Technology: '', Containers: {}, Interfaces: {ChangeUriPlaceholder: {Label: Change Uri Placeholder, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: [{Type: Return, Params: items}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CreateItem: {Label: Create Item, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsAdd}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.SaveChangesAsync}, {Type: Return, Params: TypedResults.CreatedAtRoute}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, DeleteItemById: {Label: Delete Item By Id, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsSingleOrDefault}, {Type: If, Params: item is null, Flows: [{Type: Return, Params: TypedResults.NotFound}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsRemove}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.SaveChangesAsync}, {Type: Return, Params: TypedResults.NoContent}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetAllItems: {Label: Get All Items, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsToListAsync}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetFullPath: {Label: Get Full Path, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: ""}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetImageMimeTypeFromImageFileExtension: {Label: Get Image Mime Type From Image File Extension, Description: '', Path: '', IsPrivate: true, Protocol: '', Flow: {Flows: ""}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemById: {Label: Get Item By Id, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: id <= 0, Flows: [{Type: Return, Params: TypedResults.BadRequest}]}, {Type: If, Params: item == null, Flows: [{Type: Return, Params: TypedResults.NotFound}]}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemPictureById: {Label: Get Item Picture By Id, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: item is null, Flows: [{Type: Return, Params: TypedResults.NotFound}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.GetFullPath}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.GetImageMimeTypeFromImageFileExtension}, {Type: Return, Params: TypedResults.PhysicalFile}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemsByBrandAndTypeId: {Label: Get Items By Brand And Type Id, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemsByBrandId: {Label: Get Items By Brand Id, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemsByIds: {Label: Get Items By Ids, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsToListAsync}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemsByName: {Label: Get Items By Name, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsToListAsync}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, GetItemsBySemanticRelevance: {Label: Get Items By Semantic Relevance, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: '!services.CatalogAI.IsEnabled', Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.GetItemsByName}]}, {Type: If, Params: services.Logger.IsEnabled(LogLevel.Debug), Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsToListAsync}, {Type: Else, Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.CatalogItemsToListAsync}]}]}, {Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Api.Components.CatalogApi.Interfaces.ChangeUriPlaceholder}, {Type: Return, Params: TypedResults.Ok}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, MapCatalogApi: {Label: Map Catalog Api, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: Return, Params: app}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, UpdateItem: {Label: Update Item, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {Flows: [{Type: If, Params: catalogItem == null, Flows: [{Type: Return, Params: TypedResults.NotFound}]}, {Type: If, Params: priceEntry.IsModified, Flows: [{Type: Else, Flows: [{Type: Use, Params: dotnet.eShop.Architecture.SoftwareSystems.CatalogApi.Containers.Infrastructure.Components.CatalogContext.Interfaces.SaveChangesAsync}]}]}, {Type: Return, Params: TypedResults.Created}]}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}}}}, Interfaces: {}, Entities: {}}, Infrastructure: {Label: Infrastructure, Description: '', ContainerType: None, Boundary: Internal, Technology: '', Components: {CatalogContext: {Label: Catalog Context, ComponentType: None, Description: '', Technology: '', Containers: {}, Interfaces: {CatalogBrandsAdd: {Label: Catalog Brands Add, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsAnyAsync: {Label: Catalog Brands Any Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsAsQueryable: {Label: Catalog Brands As Queryable, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsFindAsync: {Label: Catalog Brands Find Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsFirstOrDefaultAsync: {Label: Catalog Brands First Or Default Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsRemove: {Label: Catalog Brands Remove, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsSingleOrDefault: {Label: Catalog Brands Single Or Default, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogBrandsToListAsync: {Label: Catalog Brands To List Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsAdd: {Label: Catalog Items Add, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsAnyAsync: {Label: Catalog Items Any Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsAsQueryable: {Label: Catalog Items As Queryable, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsFindAsync: {Label: Catalog Items Find Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsFirstOrDefaultAsync: {Label: Catalog Items First Or Default Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsRemove: {Label: Catalog Items Remove, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsSingleOrDefault: {Label: Catalog Items Single Or Default, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogItemsToListAsync: {Label: Catalog Items To List Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesAdd: {Label: Catalog Types Add, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesAnyAsync: {Label: Catalog Types Any Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesAsQueryable: {Label: Catalog Types As Queryable, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesFindAsync: {Label: Catalog Types Find Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesFirstOrDefaultAsync: {Label: Catalog Types First Or Default Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesRemove: {Label: Catalog Types Remove, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesSingleOrDefault: {Label: Catalog Types Single Or Default, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, CatalogTypesToListAsync: {Label: Catalog Types To List Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}, SaveChangesAsync: {Label: Save Changes Async, Description: '', Path: '', IsPrivate: false, Protocol: '', Flow: {}, Input: '', InputTemplate: '', Output: '', OutputTemplate: ''}}}}, Interfaces: {}, Entities: {}}}
          Interfaces: {}
...
